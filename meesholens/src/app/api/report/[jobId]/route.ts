import PDFDocument from "pdfkit";
import type { NextRequest } from "next/server";
import { getJob } from "@/lib/jobs";

function formatCurrency(amount: number, currency: string) {
  return new Intl.NumberFormat("en-IN", {
    style: "currency",
    currency,
    maximumFractionDigits: 0,
  }).format(amount);
}

export async function GET(_request: NextRequest, context: any) {
  const job = await getJob((context.params?.jobId ?? "") as string);

  if (!job || !job.result) {
    return new Response("Job not ready", { status: 404 });
  }

  const { result } = job;
  const doc = new PDFDocument({ size: "A4", margin: 48 });

  const stream = new ReadableStream<Uint8Array>({
    start(controller) {
      doc.on("data", (chunk) => controller.enqueue(new Uint8Array(chunk)));
      doc.on("end", () => controller.close());
      doc.on("error", (error) => controller.error(error));
    },
  });

  doc
    .fillColor("#0f766e")
    .fontSize(20)
    .text("MeeshoLens Product Intelligence Report", { align: "left" })
    .moveDown(0.5);

  doc
    .fillColor("#1a2333")
    .fontSize(16)
    .text(result.product.title)
    .fillColor("#4b5563")
    .fontSize(11)
    .text(`Category: ${result.product.category}`)
    .text(`Seller: ${result.product.seller.name}`)
    .text(`Average Rating: ${result.product.averageRating.toFixed(1)} (${result.product.ratingCount} ratings)`)
    .moveDown(0.5);

  doc
    .fillColor("#0f766e")
    .fontSize(14)
    .text("Live Snapshot", { underline: true })
    .moveDown(0.25);

  doc
    .fillColor("#1a2333")
    .fontSize(11)
    .text(
      `Current Price: ${formatCurrency(result.pricing.currentPrice, result.pricing.currency)}`,
    )
    .text(
      `Discount vs previous: ${result.pricing.discountPercentage ?? 0}% (${formatCurrency(result.pricing.delta ?? 0, result.pricing.currency)} delta)`,
    )
    .text(
      `Momentum: ${result.insights.salesBehavior.momentum} | Revenue Potential: ${formatCurrency(result.insights.salesBehavior.estimatedMonthlyRevenue, result.pricing.currency)}`,
    )
    .moveDown(0.5);

  doc
    .fillColor("#0f766e")
    .fontSize(14)
    .text("AI Summary", { underline: true })
    .moveDown(0.3);

  doc.fillColor("#1a2333").fontSize(11).text(result.insights.summary).moveDown(0.5);

  doc
    .fillColor("#0f766e")
    .fontSize(14)
    .text("Sentiment Breakdown", { underline: true })
    .moveDown(0.3);

  const sentiment = result.insights.sentiment;
  doc
    .fillColor("#1a2333")
    .fontSize(11)
    .text(`Positive: ${sentiment.positive}`)
    .text(`Neutral: ${sentiment.neutral}`)
    .text(`Negative: ${sentiment.negative}`)
    .moveDown(0.5);

  doc
    .fillColor("#0f766e")
    .fontSize(14)
    .text("Top Topics", { underline: true })
    .moveDown(0.3);

  result.insights.topTopics.forEach((topic) => {
    doc
      .fillColor("#1a2333")
      .fontSize(11)
      .text(`${topic.label.toUpperCase()} â€” ${(topic.strength * 100).toFixed(0)}% signal`)
      .fillColor("#4b5563")
      .text(`Keywords: ${topic.keywords.join(", ")}`)
      .moveDown(0.3);
  });

  doc
    .fillColor("#0f766e")
    .fontSize(14)
    .text("Action Items", { underline: true })
    .moveDown(0.3);

  result.insights.suggestedActions.forEach((action, index) => {
    doc
      .fillColor("#1a2333")
      .fontSize(11)
      .text(`${index + 1}. ${action}`)
      .moveDown(0.1);
  });

  doc.moveDown(0.5);

  doc
    .fillColor("#4b5563")
    .fontSize(10)
    .text("Generated by MeeshoLens with live scraping & AI insights.", {
      align: "left",
    })
    .text(`Generated at ${new Date(result.generatedAt).toLocaleString()}`);

  doc.end();

  return new Response(stream, {
    headers: {
      "Content-Type": "application/pdf",
      "Cache-Control": "no-store",
      "Content-Disposition": `attachment; filename="MeeshoLens-${result.product.id}.pdf"`,
    },
  });
}
